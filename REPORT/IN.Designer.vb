Imports System.Data
Imports System.Collections.Comparer
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18449
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

'#Pragma warning disable 1591

Namespace REPORT


    ''' <summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <System.Serializable> _
    <System.ComponentModel.DesignerCategoryAttribute("code")> _
    <System.ComponentModel.ToolboxItem(True)> _
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")> _
    <System.Xml.Serialization.XmlRootAttribute("IN")> _
    <System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
    Partial Public Class [IN]
        Inherits Global.System.Data.DataSet

        Private tablerpt_khachhang As rpt_khachhangDataTable

        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            Me.BeginInit()
            Me.InitClass()
            Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(info As Global.System.Runtime.Serialization.SerializationInfo, context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, False)
            If (Me.IsBinarySerialized(info, context) = True) Then
                Me.InitVars(False)
                Dim schemaChangedHandler1 As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = DirectCast(info.GetValue("XmlSchema", GetType(String)), String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (ds.Tables("rpt_khachhang") IsNot Nothing) Then
                    MyBase.Tables.Add(New rpt_khachhangDataTable(ds.Tables("rpt_khachhang")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.[Namespace] = ds.[Namespace]
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.Browsable(False)> _
        <System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
        Public ReadOnly Property rpt_khachhang() As rpt_khachhangDataTable
            Get
                Return Me.tablerpt_khachhang
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.BrowsableAttribute(True)> _
        <System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set(value As Global.System.Data.SchemaSerializationMode)
                Me._schemaSerializationMode = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As [IN] = DirectCast(MyBase.Clone(), [IN])
            cln.InitVars()
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return False
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return False
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub ReadXmlSerializable(reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset()
                Dim ds As New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If (ds.Tables("rpt_khachhang") IsNot Nothing) Then
                    MyBase.Tables.Add(New rpt_khachhangDataTable(ds.Tables("rpt_khachhang")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.[Namespace] = ds.[Namespace]
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXml(reader)
                Me.InitVars()
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.InitVars(True)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars(initTable As Boolean)
            Me.tablerpt_khachhang = DirectCast(MyBase.Tables("rpt_khachhang"), rpt_khachhangDataTable)
            If (initTable = True) Then
                If (Me.tablerpt_khachhang IsNot Nothing) Then
                    Me.tablerpt_khachhang.InitVars()
                End If
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.DataSetName = "IN"
            Me.Prefix = ""
            Me.[Namespace] = "http://tempuri.org/IN.xsd"
            Me.EnforceConstraints = True
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tablerpt_khachhang = New rpt_khachhangDataTable()
            MyBase.Tables.Add(Me.tablerpt_khachhang)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function ShouldSerializerpt_khachhang() As Boolean
            Return False
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub SchemaChanged(sender As Object, e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars()
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedDataSetSchema(xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As New [IN]()
            Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As New Global.System.Xml.Schema.XmlSchemaAny()
            any.[Namespace] = ds.[Namespace]
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As New Global.System.IO.MemoryStream()
                Dim s2 As New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
                    While schemas.MoveNext()
                        schema = DirectCast(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))


                            End While
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                    End While
                Finally
                    If (s1 IsNot Nothing) Then
                        s1.Close()
                    End If
                    If (s2 IsNot Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function

        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Delegate Sub rpt_khachhangRowChangeEventHandler(sender As Object, e As rpt_khachhangRowChangeEvent)

        ''' <summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <System.Serializable> _
        <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
        Partial Public Class rpt_khachhangDataTable
            Inherits Global.System.Data.TypedTableBase(Of rpt_khachhangRow)

            Private columnstt As Global.System.Data.DataColumn

            Private columnmakhachhang As Global.System.Data.DataColumn

            Private columntenkhachhang As Global.System.Data.DataColumn

            Private columnma_so_thue As Global.System.Data.DataColumn

            Private columndia_chi As Global.System.Data.DataColumn

            Private columndien_thoai As Global.System.Data.DataColumn

            Private columnfax As Global.System.Data.DataColumn

            Private columnngay_tao As Global.System.Data.DataColumn

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Sub New()
                Me.TableName = "rpt_khachhang"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Friend Sub New(table As Global.System.Data.DataTable)
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
                    Me.Locale = table.Locale
                End If
                If (table.[Namespace] <> table.DataSet.[Namespace]) Then
                    Me.[Namespace] = table.[Namespace]
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Protected Sub New(info As Global.System.Runtime.Serialization.SerializationInfo, context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public ReadOnly Property sttColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnstt
                End Get
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public ReadOnly Property makhachhangColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnmakhachhang
                End Get
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public ReadOnly Property tenkhachhangColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columntenkhachhang
                End Get
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public ReadOnly Property ma_so_thueColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnma_so_thue
                End Get
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public ReadOnly Property dia_chiColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columndia_chi
                End Get
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public ReadOnly Property dien_thoaiColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columndien_thoai
                End Get
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public ReadOnly Property faxColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnfax
                End Get
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public ReadOnly Property ngay_taoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnngay_tao
                End Get
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            <System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Default Public ReadOnly Property Item(index As Integer) As rpt_khachhangRow
                Get
                    Return DirectCast(Me.Rows(index), rpt_khachhangRow)
                End Get
            End Property

            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Event rpt_khachhangRowChanging As rpt_khachhangRowChangeEventHandler

            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Event rpt_khachhangRowChanged As rpt_khachhangRowChangeEventHandler

            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Event rpt_khachhangRowDeleting As rpt_khachhangRowChangeEventHandler

            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Event rpt_khachhangRowDeleted As rpt_khachhangRowChangeEventHandler

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Sub Addrpt_khachhangRow(row As rpt_khachhangRow)
                Me.Rows.Add(row)
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Function Addrpt_khachhangRow(stt As Integer, makhachhang As String, tenkhachhang As String, ma_so_thue As String, dia_chi As String, dien_thoai As String, _
                fax As String, ngay_tao As System.DateTime) As rpt_khachhangRow
                Dim rowrpt_khachhangRow As rpt_khachhangRow = DirectCast(Me.NewRow(), rpt_khachhangRow)
                Dim columnValuesArray As Object() = New Object() {stt, makhachhang, tenkhachhang, ma_so_thue, dia_chi, dien_thoai, _
                    fax, ngay_tao}
                rowrpt_khachhangRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowrpt_khachhangRow)
                Return rowrpt_khachhangRow
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As rpt_khachhangDataTable = DirectCast(MyBase.Clone(), rpt_khachhangDataTable)
                cln.InitVars()
                Return cln
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New rpt_khachhangDataTable()
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Friend Sub InitVars()
                Me.columnstt = MyBase.Columns("stt")
                Me.columnmakhachhang = MyBase.Columns("makhachhang")
                Me.columntenkhachhang = MyBase.Columns("tenkhachhang")
                Me.columnma_so_thue = MyBase.Columns("ma_so_thue")
                Me.columndia_chi = MyBase.Columns("dia_chi")
                Me.columndien_thoai = MyBase.Columns("dien_thoai")
                Me.columnfax = MyBase.Columns("fax")
                Me.columnngay_tao = MyBase.Columns("ngay_tao")
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Private Sub InitClass()
                Me.columnstt = New Global.System.Data.DataColumn("stt", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnstt)
                Me.columnmakhachhang = New Global.System.Data.DataColumn("makhachhang", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnmakhachhang)
                Me.columntenkhachhang = New Global.System.Data.DataColumn("tenkhachhang", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columntenkhachhang)
                Me.columnma_so_thue = New Global.System.Data.DataColumn("ma_so_thue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnma_so_thue)
                Me.columndia_chi = New Global.System.Data.DataColumn("dia_chi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columndia_chi)
                Me.columndien_thoai = New Global.System.Data.DataColumn("dien_thoai", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columndien_thoai)
                Me.columnfax = New Global.System.Data.DataColumn("fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnfax)
                Me.columnngay_tao = New Global.System.Data.DataColumn("ngay_tao", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnngay_tao)
                Me.columnmakhachhang.MaxLength = 10
                Me.columntenkhachhang.MaxLength = 100
                Me.columnma_so_thue.MaxLength = 50
                Me.columndia_chi.MaxLength = 100
                Me.columndien_thoai.MaxLength = 50
                Me.columnfax.MaxLength = 50
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Function Newrpt_khachhangRow() As rpt_khachhangRow
                Return DirectCast(Me.NewRow(), rpt_khachhangRow)
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Protected Overrides Function NewRowFromBuilder(builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New rpt_khachhangRow(builder)
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(rpt_khachhangRow)
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Protected Overrides Sub OnRowChanged(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                RaiseEvent rpt_khachhangRowChanged(Me, New rpt_khachhangRowChangeEvent(DirectCast(e.Row, rpt_khachhangRow), e.Action))
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Protected Overrides Sub OnRowChanging(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                RaiseEvent rpt_khachhangRowChanging(Me, New rpt_khachhangRowChangeEvent(DirectCast(e.Row, rpt_khachhangRow), e.Action))
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Protected Overrides Sub OnRowDeleted(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                RaiseEvent rpt_khachhangRowDeleted(Me, New rpt_khachhangRowChangeEvent(DirectCast(e.Row, rpt_khachhangRow), e.Action))
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Protected Overrides Sub OnRowDeleting(e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                RaiseEvent rpt_khachhangRowDeleting(Me, New rpt_khachhangRowChangeEvent(DirectCast(e.Row, rpt_khachhangRow), e.Action))
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Sub Removerpt_khachhangRow(row As rpt_khachhangRow)
                Me.Rows.Remove(row)
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Shared Function GetTypedTableSchema(xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As New [IN]()
                Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
                any1.[Namespace] = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
                any2.[Namespace] = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.[Namespace]
                type.Attributes.Add(attribute1)
                Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "rpt_khachhangDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As New Global.System.IO.MemoryStream()
                    Dim s2 As New Global.System.IO.MemoryStream()
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
                        While schemas.MoveNext()
                            schema = DirectCast(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))


                                End While
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        End While
                    Finally
                        If (s1 IsNot Nothing) Then
                            s1.Close()
                        End If
                        If (s2 IsNot Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        ''' <summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class rpt_khachhangRow
            Inherits Global.System.Data.DataRow

            Private tablerpt_khachhang As rpt_khachhangDataTable

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Friend Sub New(rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tablerpt_khachhang = DirectCast(Me.Table, rpt_khachhangDataTable)
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Property stt() As Integer
                Get
                    Try
                        Return CInt(Me(Me.tablerpt_khachhang.sttColumn))
                    Catch e As System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'stt' in table 'rpt_khachhang' is DBNull.", e)
                    End Try
                End Get
                Set(value As Integer)
                    Me(Me.tablerpt_khachhang.sttColumn) = value
                End Set
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Property makhachhang() As String
                Get
                    Try
                        Return DirectCast(Me(Me.tablerpt_khachhang.makhachhangColumn), String)
                    Catch e As System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'makhachhang' in table 'rpt_khachhang' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(Me.tablerpt_khachhang.makhachhangColumn) = value
                End Set
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Property tenkhachhang() As String
                Get
                    Try
                        Return DirectCast(Me(Me.tablerpt_khachhang.tenkhachhangColumn), String)
                    Catch e As System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'tenkhachhang' in table 'rpt_khachhang' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(Me.tablerpt_khachhang.tenkhachhangColumn) = value
                End Set
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Property ma_so_thue() As String
                Get
                    Try
                        Return DirectCast(Me(Me.tablerpt_khachhang.ma_so_thueColumn), String)
                    Catch e As System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ma_so_thue' in table 'rpt_khachhang' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(Me.tablerpt_khachhang.ma_so_thueColumn) = value
                End Set
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Property dia_chi() As String
                Get
                    Try
                        Return DirectCast(Me(Me.tablerpt_khachhang.dia_chiColumn), String)
                    Catch e As System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'dia_chi' in table 'rpt_khachhang' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(Me.tablerpt_khachhang.dia_chiColumn) = value
                End Set
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Property dien_thoai() As String
                Get
                    Try
                        Return DirectCast(Me(Me.tablerpt_khachhang.dien_thoaiColumn), String)
                    Catch e As System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'dien_thoai' in table 'rpt_khachhang' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(Me.tablerpt_khachhang.dien_thoaiColumn) = value
                End Set
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Property fax() As String
                Get
                    Try
                        Return DirectCast(Me(Me.tablerpt_khachhang.faxColumn), String)
                    Catch e As System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'fax' in table 'rpt_khachhang' is DBNull.", e)
                    End Try
                End Get
                Set(value As String)
                    Me(Me.tablerpt_khachhang.faxColumn) = value
                End Set
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Property ngay_tao() As System.DateTime
                Get
                    Try
                        Return CDate(Me(Me.tablerpt_khachhang.ngay_taoColumn))
                    Catch e As System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ngay_tao' in table 'rpt_khachhang' is DBNull.", e)
                    End Try
                End Get
                Set(value As System.DateTime)
                    Me(Me.tablerpt_khachhang.ngay_taoColumn) = value
                End Set
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Function IssttNull() As Boolean
                Return Me.IsNull(Me.tablerpt_khachhang.sttColumn)
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Sub SetsttNull()
                Me(Me.tablerpt_khachhang.sttColumn) = Global.System.Convert.DBNull
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Function IsmakhachhangNull() As Boolean
                Return Me.IsNull(Me.tablerpt_khachhang.makhachhangColumn)
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Sub SetmakhachhangNull()
                Me(Me.tablerpt_khachhang.makhachhangColumn) = Global.System.Convert.DBNull
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Function IstenkhachhangNull() As Boolean
                Return Me.IsNull(Me.tablerpt_khachhang.tenkhachhangColumn)
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Sub SettenkhachhangNull()
                Me(Me.tablerpt_khachhang.tenkhachhangColumn) = Global.System.Convert.DBNull
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Function Isma_so_thueNull() As Boolean
                Return Me.IsNull(Me.tablerpt_khachhang.ma_so_thueColumn)
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Sub Setma_so_thueNull()
                Me(Me.tablerpt_khachhang.ma_so_thueColumn) = Global.System.Convert.DBNull
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Function Isdia_chiNull() As Boolean
                Return Me.IsNull(Me.tablerpt_khachhang.dia_chiColumn)
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Sub Setdia_chiNull()
                Me(Me.tablerpt_khachhang.dia_chiColumn) = Global.System.Convert.DBNull
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Function Isdien_thoaiNull() As Boolean
                Return Me.IsNull(Me.tablerpt_khachhang.dien_thoaiColumn)
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Sub Setdien_thoaiNull()
                Me(Me.tablerpt_khachhang.dien_thoaiColumn) = Global.System.Convert.DBNull
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Function IsfaxNull() As Boolean
                Return Me.IsNull(Me.tablerpt_khachhang.faxColumn)
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Sub SetfaxNull()
                Me(Me.tablerpt_khachhang.faxColumn) = Global.System.Convert.DBNull
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Function Isngay_taoNull() As Boolean
                Return Me.IsNull(Me.tablerpt_khachhang.ngay_taoColumn)
            End Function

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Sub Setngay_taoNull()
                Me(Me.tablerpt_khachhang.ngay_taoColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        ''' <summary>
        '''Row event argument class
        '''</summary>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Class rpt_khachhangRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As rpt_khachhangRow

            Private eventAction As Global.System.Data.DataRowAction

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Sub New(row As rpt_khachhangRow, action As Global.System.Data.DataRowAction)
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public ReadOnly Property Row() As rpt_khachhangRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <System.Diagnostics.DebuggerNonUserCodeAttribute> _
            <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
Namespace REPORT.INTableAdapters


    ''' <summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <System.ComponentModel.DesignerCategoryAttribute("code")> _
    <System.ComponentModel.ToolboxItem(True)> _
    <System.ComponentModel.DataObjectAttribute(True)> _
    <System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")> _
    <System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class rpt_khachhangTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection As Global.System.Data.SqlClient.SqlCommand()

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Me.Adapter.InsertCommand IsNot Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Me.Adapter.DeleteCommand IsNot Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Me.Adapter.UpdateCommand IsNot Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                While (i < Me.CommandCollection.Length)
                    If (Me.CommandCollection(i) IsNot Nothing) Then
                        DirectCast(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                End While
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                Me._transaction = value
                Dim i As Integer = 0
                While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                End While
                If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.DeleteCommand IsNot Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.InsertCommand IsNot Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.UpdateCommand IsNot Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rpt_khachhang"
            tableMapping.ColumnMappings.Add("stt", "stt")
            tableMapping.ColumnMappings.Add("makhachhang", "makhachhang")
            tableMapping.ColumnMappings.Add("tenkhachhang", "tenkhachhang")
            tableMapping.ColumnMappings.Add("ma_so_thue", "ma_so_thue")
            tableMapping.ColumnMappings.Add("dia_chi", "dia_chi")
            tableMapping.ColumnMappings.Add("dien_thoai", "dien_thoai")
            tableMapping.ColumnMappings.Add("fax", "fax")
            tableMapping.ColumnMappings.Add("ngay_tao", "ngay_tao")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[rpt_khachhang] ([stt], [makhachhang], [tenkhachhang], [ma_so_t" & "hue], [dia_chi], [dien_thoai], [fax], [ngay_tao]) VALUES (@stt, @makhachhang, @t" & "enkhachhang, @ma_so_thue, @dia_chi, @dien_thoai, @fax, @ngay_tao)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stt", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, _
                "stt", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", _
                ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@makhachhang", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, _
                "makhachhang", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", _
                ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tenkhachhang", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, _
                "tenkhachhang", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", _
                ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ma_so_thue", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, _
                "ma_so_thue", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", _
                ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dia_chi", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, _
                "dia_chi", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", _
                ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dien_thoai", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, _
                "dien_thoai", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", _
                ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fax", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, _
                "fax", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", _
                ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ngay_tao", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, _
                "ngay_tao", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", _
                ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.QLDVVTHH.Properties.Settings.[Default].ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT stt, makhachhang, tenkhachhang, ma_so_thue, dia_chi, dien_thoai, fax, ngay" & "_tao FROM dbo.rpt_khachhang"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        <System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Function Fill(dataTable As REPORT.IN.rpt_khachhangDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        <System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Function GetData() As REPORT.IN.rpt_khachhangDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As New REPORT.IN.rpt_khachhangDataTable()
            Me.Adapter.Fill(DataTable)
            Return DataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(dataTable As REPORT.IN.rpt_khachhangDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(dataSet As [IN]) As Integer
            Return Me.Adapter.Update(dataSet, "rpt_khachhang")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Function Update(dataRows As Global.System.Data.DataRow()) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        <System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Function Insert(stt As Global.System.Nullable(Of Integer), makhachhang As String, tenkhachhang As String, ma_so_thue As String, dia_chi As String, dien_thoai As String, _
            fax As String, ngay_tao As Global.System.Nullable(Of Global.System.DateTime)) As Integer
            If (stt.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CInt(stt.Value)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (makhachhang Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = DirectCast(makhachhang, String)
            End If
            If (tenkhachhang Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = DirectCast(tenkhachhang, String)
            End If
            If (ma_so_thue Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = DirectCast(ma_so_thue, String)
            End If
            If (dia_chi Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = DirectCast(dia_chi, String)
            End If
            If (dien_thoai Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = DirectCast(dien_thoai, String)
            End If
            If (fax Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = DirectCast(fax, String)
            End If
            If (ngay_tao.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CDate(ngay_tao.Value)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    ''' <summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <System.ComponentModel.DesignerCategoryAttribute("code")> _
    <System.ComponentModel.ToolboxItem(True)> _
    <System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" & "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")> _
    <System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")> _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component

        Private _updateOrder As UpdateOrderOption

        Private _rpt_khachhangTableAdapter As rpt_khachhangTableAdapter

        Private _backupDataSetBeforeUpdate As Boolean

        Private _connection As Global.System.Data.IDbConnection

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set(value As UpdateOrderOption)
                Me._updateOrder = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & "a", "System.Drawing.Design.UITypeEditor")> _
        Public Property rpt_khachhangTableAdapter() As rpt_khachhangTableAdapter
            Get
                Return Me._rpt_khachhangTableAdapter
            End Get
            Set(value As rpt_khachhangTableAdapter)
                Me._rpt_khachhangTableAdapter = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set(value As Boolean)
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.Browsable(False)> _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Me._connection IsNot Nothing) Then
                    Return Me._connection
                End If
                If ((Me._rpt_khachhangTableAdapter IsNot Nothing) AndAlso (Me._rpt_khachhangTableAdapter.Connection IsNot Nothing)) Then
                    Return Me._rpt_khachhangTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set(value As Global.System.Data.IDbConnection)
                Me._connection = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        <System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Me._rpt_khachhangTableAdapter IsNot Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property

        ''' <summary>
        '''Update rows in top-down order.
        '''</summary>
        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function UpdateUpdatedRows(dataSet As [IN], allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Me._rpt_khachhangTableAdapter IsNot Nothing) Then
                Dim updatedRows As Global.System.Data.DataRow() = dataSet.rpt_khachhang.[Select](Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((updatedRows IsNot Nothing) AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rpt_khachhangTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function

        ''' <summary>
        '''Insert rows in top-down order.
        '''</summary>
        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function UpdateInsertedRows(dataSet As [IN], allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Me._rpt_khachhangTableAdapter IsNot Nothing) Then
                Dim addedRows As Global.System.Data.DataRow() = dataSet.rpt_khachhang.[Select](Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((addedRows IsNot Nothing) AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rpt_khachhangTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function

        ''' <summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function UpdateDeletedRows(dataSet As [IN], allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Me._rpt_khachhangTableAdapter IsNot Nothing) Then
                Dim deletedRows As Global.System.Data.DataRow() = dataSet.rpt_khachhang.[Select](Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((deletedRows IsNot Nothing) AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rpt_khachhangTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function

        ''' <summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function GetRealUpdatedRows(updatedRows As Global.System.Data.DataRow(), allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing) OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing) OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = False) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            End While
            Return realUpdatedRows.ToArray()
        End Function

        ''' <summary>
        '''Update all changes to the dataset.
        '''</summary>
        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overridable Function UpdateAll(dataSet As [IN]) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges() = False) Then
                Return 0
            End If
            If ((Me._rpt_khachhangTableAdapter IsNot Nothing) AndAlso (Me.MatchTableAdapterConnection(Me._rpt_khachhangTableAdapter.Connection) = False)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" & "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = False
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken) = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close()
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open()
                workConnOpened = True
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction()
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" & "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try
                ' ---- Prepare for update -----------
                '
                If (Me._rpt_khachhangTableAdapter IsNot Nothing) Then
                    revertConnections.Add(Me._rpt_khachhangTableAdapter, Me._rpt_khachhangTableAdapter.Connection)
                    Me._rpt_khachhangTableAdapter.Connection = DirectCast(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    Me._rpt_khachhangTableAdapter.Transaction = DirectCast(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If Me._rpt_khachhangTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rpt_khachhangTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rpt_khachhangTableAdapter.Adapter)
                    End If
                End If
                ' 
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                ' 
                '---- Commit updates -----------
                '
                workTransaction.Commit()
                If (0 < allAddedRows.Count) Then
                    Dim rows As Global.System.Data.DataRow() = New System.Data.DataRow(allAddedRows.Count - 1) {}
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges()
                        i = (i + 1)
                    End While
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows As Global.System.Data.DataRow() = New System.Data.DataRow(allChangedRows.Count - 1) {}
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges()
                        i = (i + 1)
                    End While
                End If
            Catch ex As System.Exception
                workTransaction.Rollback()
                ' ---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((backupDataSet IsNot Nothing))
                    dataSet.Clear()
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows As Global.System.Data.DataRow() = New System.Data.DataRow(allAddedRows.Count - 1) {}
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges()
                            row.SetAdded()
                            i = (i + 1)
                        End While
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close()
                End If
                If (Me._rpt_khachhangTableAdapter IsNot Nothing) Then
                    Me._rpt_khachhangTableAdapter.Connection = DirectCast(revertConnections(Me._rpt_khachhangTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    Me._rpt_khachhangTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters As Global.System.Data.Common.DataAdapter() = New System.Data.Common.DataAdapter(adaptersWithAcceptChangesDuringUpdate.Count - 1) {}
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = True
                        i = (i + 1)
                    End While
                End If
            End Try
            Return result
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overridable Sub SortSelfReferenceRows(rows As Global.System.Data.DataRow(), relation As Global.System.Data.DataRelation, childFirst As Boolean)
            'Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overridable Function MatchTableAdapterConnection(inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Me._connection IsNot Nothing) Then
                Return True
            End If
            If ((Me.Connection Is Nothing) OrElse (inputConnection Is Nothing)) Then
                Return True
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return True
            End If
            Return False
        End Function

        ''' <summary>
        '''Update Order Option
        '''</summary>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Enum UpdateOrderOption

            InsertUpdateDelete = 0

            UpdateInsertDelete = 1
        End Enum

        ''' <summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        '<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        'Private Class SelfReferenceComparer
        '    Inherits Object
        '    Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)

        Private _relation As Global.System.Data.DataRelation

        Private _childFirst As Integer

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(relation As Global.System.Data.DataRelation, childFirst As Boolean)
            Me._relation = relation
            If childFirst Then
                Me._childFirst = -1
            Else
                Me._childFirst = 1
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function GetRoot(row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
            Global.System.Diagnostics.Debug.Assert((row IsNot Nothing))
            Dim root As Global.System.Data.DataRow = row
            distance = 0

            Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
            traversedRows(row) = row

            Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])
            While ((parent IsNot Nothing) AndAlso (traversedRows.ContainsKey(parent) = False))
                distance = (distance + 1)
                root = parent
                traversedRows(parent) = parent
                parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])
            End While

            If (distance = 0) Then
                traversedRows.Clear()
                traversedRows(row) = row
                parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                While ((parent IsNot Nothing) AndAlso (traversedRows.ContainsKey(parent) = False))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                End While
            End If

            Return root
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute> _
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function Compare(row1 As Global.System.Data.DataRow, row2 As Global.System.Data.DataRow) As Integer
            If Object.ReferenceEquals(row1, row2) Then
                Return 0
            End If
            If (row1 Is Nothing) Then
                Return -1
            End If
            If (row2 Is Nothing) Then
                Return 1
            End If

            Dim distance1 As Integer = 0
            Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

            Dim distance2 As Integer = 0
            Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

            If Object.ReferenceEquals(root1, root2) Then
                Return (Me._childFirst * distance1.CompareTo(distance2))
            Else
                Global.System.Diagnostics.Debug.Assert(((root1.Table IsNot Nothing) AndAlso (root2.Table IsNot Nothing)))
                If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                    Return -1
                Else
                    Return 1
                End If
            End If
        End Function
    End Class
End Namespace

'#Pragma warning restore 1591
